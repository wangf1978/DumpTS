/*

MIT License

Copyright (c) 2021 Ravin.Wang(wangf1978@hotmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
#include "platcomm.h"
#include "IP.h"

namespace IP
{
	namespace V4
	{


	}

	namespace V6
	{
		std::tuple<uint8_t, const char*, const char*, bool, const char*> IPv6_protocol_descs[256] = 
		{
			{0		, "HOPOPT",		"IPv6 Hop-by-Hop Option", true, ""},
			{1		, "ICMP",		"Internet Control Message", false, ""},
			{2		, "IGMP",		"Internet Group Management", false, "" },
			{3		, "GGP",		"Gateway-to-Gateway", false, "" },
			{4		, "IPv4",		"IPv4 encapsulation", false, "" },
			{5		, "ST",			"Stream", false, "" },
			{6		, "TCP",		"Transmission Control", false, "" },
			{7		, "CBT",		"CBT", false, "" },
			{8		, "EGP",		"Exterior Gateway Protocol", false, "" },
			{9		, "IGP",		"any private interior gateway (used by Cisco for their IGRP)", false, "" },
			{10		, "BBN-RCC-MON","BBN RCC Monitoring", false, "" },
			{11		, "NVP-II",		"Network Voice Protocol", false, "" },
			{12		, "PUP",		"PUP", false, "" },
			{13		, "ARGUS (deprecated)",	"ARGUS", false, "" },
			{14		, "EMCON",		"EMCON", false, "" },
			{15		, "XNET",		"Cross Net Debugger", false, "" },
			{16		, "CHAOS",		"Chaos", false, "" },
			{17		, "UDP",		"User Datagram", false, "" },
			{18		, "MUX",		"Multiplexing", false, "" },
			{19		, "DCN-MEAS",	"DCN Measurement Subsystems", false, "" },
			{20		, "HMP",		"Host Monitoring", false, "" },
			{21		, "PRM",		"Packet Radio Measurement", false, "" },
			{22		, "XNS-IDP",	"XEROX NS IDP", false, "" },
			{23		, "TRUNK-1",	"Trunk-1", false, "" },
			{24		, "TRUNK-2",	"Trunk-2", false, "" },
			{25		, "LEAF-1",		"Leaf-1", false, "" },
			{26		, "LEAF-2",		"Leaf-2", false, "" },
			{27		, "RDP",		"Reliable Data Protocol", false, "" },
			{28		, "IRTP",		"Internet Reliable Transaction", false, "" },
			{29		, "ISO-TP4",	"ISO Transport Protocol Class 4", false, "" },
			{30		, "NETBLT",		"Bulk Data Transfer Protocol", false, "" },
			{31		, "MFE-NSP",	"MFE Network Services Protocol", false, "" },
			{32		, "MERIT-INP",	"MERIT Internodal Protocol", false, "" },
			{33		, "DCCP",		"Datagram Congestion Control Protocol", false, "" },
			{34		, "3PC",		"Third Party Connect Protocol", false, "" },
			{35		, "IDPR",		"Inter-Domain Policy Routing Protocol", false, "" },
			{36		, "XTP",		"XTP", false, "" },
			{37		, "DDP",		"Datagram Delivery Protocol", false, "" },
			{38		, "IDPR-CMTP",	"IDPR Control Message Transport Proto", false, "" },
			{39		, "TP++",		"TP++ Transport Protocol", false, "" },
			{40		, "IL",			"IL Transport Protocol", false, "" },
			{41		, "IPv6",		"IPv6 encapsulation", false, "" },
			{42		, "SDRP",		"Source Demand Routing Protocol", false, "" },
			{43		, "IPv6-Route",	"Routing Header for IPv6", true, "" },
			{44		, "IPv6-Frag",	"Fragment Header for IPv6", true, "" },
			{45		, "IDRP",		"Inter-Domain Routing Protocol", false, "" },
			{46		, "RSVP",		"Reservation Protocol", false, "" },
			{47		, "GRE",		"Generic Routing Encapsulation", false, "" },
			{48		, "DSR",		"Dynamic Source Routing Protocol", false, "" },
			{49		, "BNA",		"BNA", false, "" },
			{50		, "ESP",		"Encap Security Payload", true, "" },
			{51		, "AH",			"Authentication Header", true, "" },
			{52		, "I-NLSP",		"Integrated Net Layer Security  TUBA", false, "" },
			{53		, "SWIPE (deprecated)",	
									"IP with Encryption", false, "" },
			{54		, "NARP",		"NBMA Address Resolution Protocol", false, "" },
			{55		, "MOBILE",		"IP Mobility", false, "" },
			{56		, "TLSP",		"Transport Layer Security Protocol using Kryptonet key management", false, "" },
			{57		, "SKIP",		"SKIP", false, "" },
			{58		, "IPv6-ICMP",	"ICMP for IPv6", false, "" },
			{59		, "IPv6-NoNxt",	"No Next Header for IPv6", false, "" },
			{60		, "IPv6-Opts",	"Destination Options for IPv6", true, "" },
			{61		, "",			"any host internal protocol", false, "" },
			{62		, "CFTP",		"CFTP", false, "" },
			{63		, "",			"any local network", false, "" },
			{64		, "SAT-EXPAK",	"SATNET and Backroom EXPAK", false, "" },
			{65		, "KRYPTOLAN",	"Kryptolan", false, "" },
			{66		, "RVD",		"MIT Remote Virtual Disk Protocol", false, "" },
			{67		, "IPPC",		"Internet Pluribus Packet Core", false, "" },
			{68		, "",			"any distributed file system", false, "" },
			{69		, "SAT-MON",	"SATNET Monitoring", false, "" },
			{70		, "VISA",		"VISA Protocol", false, "" },
			{71		, "IPCV",		"Internet Packet Core Utility", false, "" },
			{72		, "CPNX",		"Computer Protocol Network Executive", false, "" },
			{73		, "CPHB",		"Computer Protocol Heart Beat", false, "" },
			{74		, "WSN",		"Wang Span Network", false, "" },
			{75		, "PVP",		"Packet Video Protocol", false, "" },
			{76		, "BR-SAT-MON",	"Backroom SATNET Monitoring", false, "" },
			{77		, "SUN-ND",		"SUN ND PROTOCOL-Temporary", false, "" },
			{78		, "WB-MON",		"WIDEBAND Monitoring", false, "" },
			{79		, "WB-EXPAK",	"WIDEBAND EXPAK", false, "" },
			{80		, "ISO-IP",		"ISO Internet Protocol", false, "" },
			{81		, "VMTP",		"VMTP", false, "" },
			{82		, "SECURE-VMTP","SECURE-VMTP", false, "" },
			{83		, "VINES",		"VINES", false, "" },
			{84		, "TTP/IPTM",	"Transaction Transport Protocol/Internet Protocol Traffic Manager", false, "" },
			{85		, "NSFNET-IGP",	"NSFNET-IGP", false, "" },
			{86		, "DGP",		"Dissimilar Gateway Protocol", false, "" },
			{87		, "TCF",		"TCF", false, "" },
			{88		, "EIGRP",		"EIGRP", false, "" },
			{89		, "OSPFIGP",	"OSPFIGP", false, "" },
			{90		, "Sprite-RPC",	"Sprite RPC Protocol", false, "" },
			{91		, "LARP",		"Locus Address Resolution Protocol", false, "" },
			{92		, "MTP",		"Multicast Transport Protocol", false, "" },
			{93		, "AX.25",		"AX.25 Frames", false, "" },
			{94		, "IPIP",		"IP-within-IP Encapsulation Protocol", false, "" },
			{95		, "MICP (deprecated)",	
									"Mobile Internetworking Control Pro.", false, "" },
			{96		, "SCC-SP",		"Semaphore Communications Sec. Pro.", false, "" },
			{97		, "ETHERIP",	"Ethernet-within-IP Encapsulation", false, "" },
			{98		, "ENCAP",		"Encapsulation Header", false, "" },
			{99		, "",			"any private encryption scheme", false, "" },
			{100	, "GMTP",		"GMTP", false, "" },
			{101	, "IFMP",		"Ipsilon Flow Management Protocol", false, "" },
			{102	, "PNNI",		"PNNI over IP", false, "" },
			{103	, "PIM",		"Protocol Independent Multicast", false, "" },
			{104	, "ARIS",		"ARIS", false, "" },
			{105	, "SCPS",		"SCPS", false, "" },
			{106	, "QNX",		"QNX", false, "" },
			{107	, "A/N",		"Active Networks", false, "" },
			{108	, "IPComp",		"IP Payload Compression Protocol", false, "" },
			{109	, "SNP",		"Sitara Networks Protocol", false, "" },
			{110	, "Compaq-Peer","Compaq Peer Protocol", false, "" },
			{111	, "IPX-in-IP",	"IPX in IP", false, "" },
			{112	, "VRRP",		"Virtual Router Redundancy Protocol", false, "" },
			{113	, "PGM",		"PGM Reliable Transport Protocol", false, "" },
			{114	, "",			"any 0-hop protocol", false, "" },
			{115	, "L2TP",		"Layer Two Tunneling Protocol", false, "" },
			{116	, "DDX",		"D-II Data Exchange (DDX)", false, "" },
			{117	, "IATP",		"Interactive Agent Transfer Protocol", false, "" },
			{118	, "STP",		"Schedule Transfer Protocol", false, "" },
			{119	, "SRP",		"SpectraLink Radio Protocol", false, "" },
			{120	, "UTI",		"UTI", false, "" },
			{121	, "SMP",		"Simple Message Protocol", false, "" },
			{122	, "SM (deprecated)", 
									"Simple Multicast Protocol", false, "" },
			{123	, "PTP",		"Performance Transparency Protocol", false, "" },
			{124	, "ISIS over IPv4",	
									"", false, "" },
			{125	, "FIRE",		"", false, "" },
			{126	, "CRTP",		"Combat Radio Transport Protocol", false, "" },
			{127	, "CRUDP",		"Combat Radio User Datagram", false, "" },
			{128	, "SSCOPMCE",	"", false, "" },
			{129	, "IPLT",		"", false, "" },
			{130	, "SPS",		"Secure Packet Shield", false, "" },
			{131	, "PIPE",		"Private IP Encapsulation within IP", false, "" },
			{132	, "SCTP",		"Stream Control Transmission Protocol", false, "" },
			{133	, "FC",			"Fibre Channel", false, "" },
			{134	, "RSVP-E2E-IGNORE", 
									"", false, "" },
			{135	, "Mobility Header", 
									"", true, ""},
			{136	, "UDPLite",	"", false, ""},
			{137	, "MPLS-in-IP", "", false, ""},
			{138	, "manet",		"MANET Protocols", false, "" },
			{139	, "HIP",		"Host Identity Protocol", true, "" },
			{140	, "Shim6",		"Shim6 Protocol", true, "" },
			{141	, "WESP",		"Wrapped Encapsulating Security Payload", false, "" },
			{142	, "ROHC",		"Robust Header Compression", false, "" },
			{143	, "",			"Unassigned", false, ""},
			{144	, "",			"Unassigned", false, ""},
			{145	, "",			"Unassigned", false, ""},
			{146	, "",			"Unassigned", false, ""},
			{147	, "",			"Unassigned", false, ""},
			{148	, "",			"Unassigned", false, ""},
			{149	, "",			"Unassigned", false, ""},
			{150	, "",			"Unassigned", false, ""},
			{151	, "",			"Unassigned", false, ""},
			{152	, "",			"Unassigned", false, ""},
			{153	, "",			"Unassigned", false, ""},
			{154	, "",			"Unassigned", false, ""},
			{155	, "",			"Unassigned", false, ""},
			{156	, "",			"Unassigned", false, ""},
			{157	, "",			"Unassigned", false, ""},
			{158	, "",			"Unassigned", false, ""},
			{159	, "",			"Unassigned", false, ""},
			{160	, "",			"Unassigned", false, ""},
			{161	, "",			"Unassigned", false, ""},
			{162	, "",			"Unassigned", false, ""},
			{163	, "",			"Unassigned", false, ""},
			{164	, "",			"Unassigned", false, ""},
			{165	, "",			"Unassigned", false, ""},
			{166	, "",			"Unassigned", false, ""},
			{167	, "",			"Unassigned", false, ""},
			{168	, "",			"Unassigned", false, ""},
			{169	, "",			"Unassigned", false, ""},
			{170	, "",			"Unassigned", false, ""},
			{171	, "",			"Unassigned", false, ""},
			{172	, "",			"Unassigned", false, ""},
			{173	, "",			"Unassigned", false, ""},
			{174	, "",			"Unassigned", false, ""},
			{175	, "",			"Unassigned", false, ""},
			{176	, "",			"Unassigned", false, ""},
			{177	, "",			"Unassigned", false, ""},
			{178	, "",			"Unassigned", false, ""},
			{179	, "",			"Unassigned", false, ""},
			{180	, "",			"Unassigned", false, ""},
			{181	, "",			"Unassigned", false, ""},
			{182	, "",			"Unassigned", false, ""},
			{183	, "",			"Unassigned", false, ""},
			{184	, "",			"Unassigned", false, ""},
			{185	, "",			"Unassigned", false, ""},
			{186	, "",			"Unassigned", false, ""},
			{187	, "",			"Unassigned", false, ""},
			{188	, "",			"Unassigned", false, ""},
			{189	, "",			"Unassigned", false, ""},
			{190	, "",			"Unassigned", false, ""},
			{191	, "",			"Unassigned", false, ""},
			{192	, "",			"Unassigned", false, ""},
			{193	, "",			"Unassigned", false, ""},
			{194	, "",			"Unassigned", false, ""},
			{195	, "",			"Unassigned", false, ""},
			{196	, "",			"Unassigned", false, ""},
			{197	, "",			"Unassigned", false, ""},
			{198	, "",			"Unassigned", false, ""},
			{199	, "",			"Unassigned", false, ""},
			{200	, "",			"Unassigned", false, ""},
			{201	, "",			"Unassigned", false, ""},
			{202	, "",			"Unassigned", false, ""},
			{203	, "",			"Unassigned", false, ""},
			{204	, "",			"Unassigned", false, ""},
			{205	, "",			"Unassigned", false, ""},
			{206	, "",			"Unassigned", false, ""},
			{207	, "",			"Unassigned", false, ""},
			{208	, "",			"Unassigned", false, ""},
			{209	, "",			"Unassigned", false, ""},
			{210	, "",			"Unassigned", false, ""},
			{211	, "",			"Unassigned", false, ""},
			{212	, "",			"Unassigned", false, ""},
			{213	, "",			"Unassigned", false, ""},
			{214	, "",			"Unassigned", false, ""},
			{215	, "",			"Unassigned", false, ""},
			{216	, "",			"Unassigned", false, ""},
			{217	, "",			"Unassigned", false, ""},
			{218	, "",			"Unassigned", false, ""},
			{219	, "",			"Unassigned", false, ""},
			{220	, "",			"Unassigned", false, ""},
			{221	, "",			"Unassigned", false, ""},
			{222	, "",			"Unassigned", false, ""},
			{223	, "",			"Unassigned", false, ""},
			{224	, "",			"Unassigned", false, ""},
			{225	, "",			"Unassigned", false, ""},
			{226	, "",			"Unassigned", false, ""},
			{227	, "",			"Unassigned", false, ""},
			{228	, "",			"Unassigned", false, ""},
			{229	, "",			"Unassigned", false, ""},
			{230	, "",			"Unassigned", false, ""},
			{231	, "",			"Unassigned", false, ""},
			{232	, "",			"Unassigned", false, ""},
			{233	, "",			"Unassigned", false, ""},
			{234	, "",			"Unassigned", false, ""},
			{235	, "",			"Unassigned", false, ""},
			{236	, "",			"Unassigned", false, ""},
			{237	, "",			"Unassigned", false, ""},
			{238	, "",			"Unassigned", false, ""},
			{239	, "",			"Unassigned", false, ""},
			{240	, "",			"Unassigned", false, ""},
			{241	, "",			"Unassigned", false, ""},
			{242	, "",			"Unassigned", false, ""},
			{243	, "",			"Unassigned", false, ""},
			{244	, "",			"Unassigned", false, ""},
			{245	, "",			"Unassigned", false, ""},
			{246	, "",			"Unassigned", false, ""},
			{247	, "",			"Unassigned", false, ""},
			{248	, "",			"Unassigned", false, ""},
			{249	, "",			"Unassigned", false, ""},
			{250	, "",			"Unassigned", false, ""},
			{251	, "",			"Unassigned", false, ""},
			{252	, "",			"Unassigned", false, ""},
			{253	, "Use for experimentation and testing", "", true, ""},
			{254	, "Use for experimentation and testing", "", true, ""},
			{255	, "Reserved",	"", false, ""},
		};
	}

	bool operator==(NTPv4Data::NTPTimestampFormat const &t1, NTPv4Data::NTPTimestampFormat const &t2)
	{
		return t1.Seconds == t2.Seconds && t1.Fraction == t2.Fraction;
	}

	bool operator!=(NTPv4Data::NTPTimestampFormat const &t1, NTPv4Data::NTPTimestampFormat const &t2)
	{
		return t1.Seconds != t2.Seconds || t1.Fraction != t2.Fraction;
	}
}

